@app.route('/form')
def form():
    return render_template('form-v2.html', questions=questions)

*******************************************************************

@app.route('/form-test', methods=['GET', 'POST'])
def form_test():
    answers = []
    if request.method == 'POST':
    # Retrieve the selected answer from the form
        answer = request.form.get('answer')
        
        print(answer)
        
        # Process the selected answer, store it, or perform any other necessary actions
        answers.append(answer)
        
        # Determine the index of the current question
        current_question_index = int(request.form.get('question_index', 0))
        
        if current_question_index < len(questions) - 1:
            # Increment the question index to display the next question
            next_question_index = current_question_index + 1
            return render_template('form-test.html', question=questions[next_question_index], question_index=next_question_index)
        else:
            # Display a thank you message or redirect to a different page
            # return render_template('home.html')
            print(answers)            
            return redirect(url_for('home'))
    else:
        # Display the first question when initially accessing the page
        return render_template('form-test.html', question=questions[0], question_index=0)

*******************************************************************

From form_v2.html:

{% for question in questions %}
    <h1>{{ question }}</h1>
    <label>Agree</label>
    <input type="radio" name="q{{ questions.index(question) + 1 }}" value="5" />
    <input type="radio" name="q{{ questions.index(question) + 1 }}" value="4" />
    <input type="radio" name="q{{ questions.index(question) + 1 }}" value="3" />
    <input type="radio" name="q{{ questions.index(question) + 1 }}" value="2" />
    <input type="radio" name="q{{ questions.index(question) + 1 }}" value="1" />
    <label>Disagree</label>
{% endfor %}

*******************************************************************

def form_v1():
    openness = []

    if request.method == 'POST':

        # getting the first five answers provided in the web-form

        openness_questions = ['q1', 'q2', 'q3', 'q4']
        openness_test = 0

        openness_total = 0
        conscientiousness_total = 0
        extraversion_total = 0
        agreeableness_total = 0
        neuroticism_total = 0

        for question in openness_questions:
            openness_test = openness_test + int(request.form.get(question))

        form_questions = ['q1', 'q2', 'q3', 'q4',
                          'q5', 'q6', 'q7', 'q8',
                          'q9', 'q10', 'q11', 'q12',
                          'q13', 'q14', 'q15', 'q16',
                          'q17', 'q18', 'q19', 'q20']

        for question in form_questions[0:4]:
            openness_total = openness_total + int(request.form.get(question))

        for question in form_questions[4:8]:
            conscientiousness_total = conscientiousness_total + int(request.form.get(question))

        for question in form_questions[8:12]:
            extraversion_total = extraversion_total + int(request.form.get(question))

        for question in form_questions[12:16]:
            agreeableness_total = agreeableness_total + int(request.form.get(question))

        for question in form_questions[16:]:
            neuroticism_total = neuroticism_total + int(request.form.get(question))

        print(f'openness_total is {openness_total}')
        print(f'openness_total data type is {type(openness_total)}')

        print(f'openness_total is {openness_total}')
        print(f'conscientiousness_total is {conscientiousness_total}')
        print(f'extraversion_total is {extraversion_total}')
        print(f'agreeableness_total is {agreeableness_total}')
        print(f'neuroticism_total is {neuroticism_total}')

        a1 = int(request.form.get('q1'))
        a2 = int(request.form.get('q2'))
        a3 = int(request.form.get('q3'))
        a4 = int(request.form.get('q4'))

        # grouping the answers into a single list
        for item in [a1, a2, a3, a4]:
            openness.append(item)

        # get final score for trait
        openness_score = (sum(openness)) / 2

        # EXPLANATION:
        # There are 4 questions for each personality trait. Each question has
        # 5 MCQ answers, scored from 1 to 5. Thus, the total obtained for a
        # single trait is taken out of 20 (5 x 4). To scale this down to be
        # taken out of 10 (as the machine learning model uses values between
        # 1 and 10 for each trait), we divide the collective total obtained for
        # each trait by 2.
        
        print(f'Responses for openness: {openness}')
        print(f'Final openness score: {openness_score}')
        print(f'Data type of openness score: {type(openness_score)}')
        return openness
    
    # page to be rendered when the above if-statement is passed, i.e. form page:
    return render_template('form-v1.html')

*******************************************************************

.gap-0 { gap: 0px; }
.gap-x-0 { column-gap: 0px; }
.gap-y-0 { row-gap: 0px; }
.gap-px { gap: 1px; }
.gap-x-px { column-gap: 1px; }
.gap-y-px { row-gap: 1px; }
.gap-0.5 { gap: 0.125rem; }
.gap-x-0.5 { column-gap: 0.125rem; }
.gap-y-0.5 { row-gap: 0.125rem; }
.gap-1 { gap: 0.25rem; }
.gap-x-1 { column-gap: 0.25rem; }
.gap-y-1 { row-gap: 0.25rem; }
.gap-1.5 { gap: 0.375rem; }
.gap-x-1.5 { column-gap: 0.375rem; }
.gap-y-1.5 { row-gap: 0.375rem; }
.gap-2 { gap: 0.5rem; }
.gap-x-2 { column-gap: 0.5rem; }
.gap-y-2 { row-gap: 0.5rem; }
.gap-2.5 { gap: 0.625rem; }
.gap-x-2.5 { column-gap: 0.625rem; }
.gap-y-2.5 { row-gap: 0.625rem; }
.gap-3 { gap: 0.75rem; }
.gap-x-3 { column-gap: 0.75rem; }
.gap-y-3 { row-gap: 0.75rem; }
.gap-3.5 { gap: 0.875rem; }
.gap-x-3.5 { column-gap: 0.875rem; }
.gap-y-3.5 { row-gap: 0.875rem; }
.gap-4 { gap: 1rem; }
.gap-x-4 { column-gap: 1rem; }
.gap-y-4 { row-gap: 1rem; }
.gap-5 { gap: 1.25rem; }
.gap-x-5 { column-gap: 1.25rem; }
.gap-y-5 { row-gap: 1.25rem; }
.gap-6 { gap: 1.5rem; }
.gap-x-6 { column-gap: 1.5rem; }
.gap-y-6 { row-gap: 1.5rem; }
.gap-7 { gap: 1.75rem; }
.gap-x-7 { column-gap: 1.75rem; }
.gap-y-7 { row-gap: 1.75rem; }
.gap-8 { gap: 2rem; }
.gap-x-8 { column-gap: 2rem; }
.gap-y-8 { row-gap: 2rem; }
.gap-9 { gap: 2.25rem; }
.gap-x-9 { column-gap: 2.25rem; }
.gap-y-9 { row-gap: 2.25rem; }
.gap-10 { gap: 2.5rem; }
.gap-x-10 { column-gap: 2.5rem; }
.gap-y-10 { row-gap: 2.5rem; }
.gap-11 { gap: 2.75rem; }
.gap-x-11 { column-gap: 2.75rem; }
.gap-y-11 { row-gap: 2.75rem; }
.gap-12 { gap: 3rem; }
.gap-x-12 { column-gap: 3rem; }
.gap-y-12 { row-gap: 3rem; }
.gap-14 { gap: 3.5rem; }
.gap-x-14 { column-gap: 3.5rem; }
.gap-y-14 { row-gap: 3.5rem; }
.gap-16 { gap: 4rem; }
.gap-x-16 { column-gap: 4rem; }
.gap-y-16 { row-gap: 4rem; }
.gap-20 { gap: 5rem; }
.gap-x-20 { column-gap: 5rem; }
.gap-y-20 { row-gap: 5rem; }
.gap-24 { gap: 6rem; }
.gap-x-24 { column-gap: 6rem; }
.gap-y-24 { row-gap: 6rem; }
.gap-28 { gap: 7rem; }
.gap-x-28 { column-gap: 7rem; }
.gap-y-28 { row-gap: 7rem; }
.gap-32 { gap: 8rem; }
.gap-x-32 { column-gap: 8rem; }
.gap-y-32 { row-gap: 8rem; }
.gap-36 { gap: 9rem; }
.gap-x-36 { column-gap: 9rem; }
.gap-y-36 { row-gap: 9rem; }
.gap-40 { gap: 10rem; }
.gap-x-40 { column-gap: 10rem; }
.gap-y-40 { row-gap: 10rem; }
.gap-44 { gap: 11rem; }
.gap-x-44 { column-gap: 11rem; }
.gap-y-44 { row-gap: 11rem; }
.gap-48 { gap: 12rem; }
.gap-x-48 { column-gap: 12rem; }
.gap-y-48 { row-gap: 12rem; }
.gap-52 { gap: 13rem; }
.gap-x-52 { column-gap: 13rem; }
.gap-y-52 { row-gap: 13rem; }
.gap-56 { gap: 14rem; }
.gap-x-56 { column-gap: 14rem; }
.gap-y-56 { row-gap: 14rem; }
.gap-60 { gap: 15rem; }
.gap-x-60 { column-gap: 15rem; }
.gap-y-60 { row-gap: 15rem; }
.gap-64 { gap: 16rem; }
.gap-x-64 { column-gap: 16rem; }
.gap-y-64 { row-gap: 16rem; }
.gap-72 { gap: 18rem; }
.gap-x-72 { column-gap: 18rem; }
.gap-y-72 { row-gap: 18rem; }
.gap-80 { gap: 20rem; }
.gap-x-80 { column-gap: 20rem; }
.gap-y-80 { row-gap: 20rem; }
.gap-96 { gap: 24rem; }
.gap-x-96 { column-gap: 24rem; }
.gap-y-96 { row-gap: 24rem; }
